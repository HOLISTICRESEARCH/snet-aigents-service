syntax = "proto3";

package aigents;

message UserInfo {
    string email = 1;
    string name = 2;
    string surname = 3;
    string secret_question = 4;
    string secret_answer = 5;
}

message Topic {
    string pattern = 1;
}

message Topics {
    repeated Topic topics = 1;
}

message Site {
    string url = 1;
}

message Sites {
    repeated Site sites = 1;
}

message Feed {
    string title = 1;
    string link = 2;
    string img_url = 3;
    string description = 4;
}

message JSONFeed {
    string news_feed = 1;
}

message Channel {
    string name = 1;
}

message Feeds {
    repeated Feed news_feed = 1;
}

message NewsItem {
    string title = 1;
    string date = 2;
    string url = 3;
    string img_url = 4;
    bool vote = 5;
}

message NewsItems {
    repeated NewsItem news_items = 1;
}

message PeerAction {
    string email = 1;
    bool action = 2;
}

message PeerActions {
    repeated PeerAction peer_actions = 1;
}

message Response {
    string text = 1;
}

service AigentsNewsFeed {
    rpc userSignup(UserInfo) returns (Response) {}
    rpc userLogin(UserInfo) returns (Response) {}
    rpc addTopic(Topic) returns (Response) {}
    rpc addTopics(Topics) returns (Response) {}
    rpc addSite(Site) returns (Response) {}
    rpc addSites(Sites) returns (Response) {}
    rpc rmTopic(Topic) returns (Response) {}
    rpc rmTopics(Topics) returns (Response) {}
    rpc rmSite(Site) returns (Response) {}
    rpc rmSites(Sites) returns (Response) {}
    rpc createNews(NewsItem) returns (Response) {}
    rpc mcreateNews(NewsItems) returns (Response) {}
    rpc voteNews(NewsItem) returns (Response) {}
    rpc mvoteNews(NewsItems) returns (Response) {}
    rpc rmNews(NewsItem) returns (Response) {}
    rpc mrmNews(NewsItems) returns (Response) {}
    rpc mkFriend(PeerAction) returns (Response) {}
    rpc mkFriends(PeerActions) returns (Response) {}
    rpc sharePeer(PeerAction) returns (Response) {}
    rpc sharePeers(PeerActions) returns (Response) {}
    rpc receivePeer(PeerAction) returns (Response) {}
    rpc receivePeers(PeerActions) returns (Response) {}
    rpc reqNews(Channel) returns (Feeds) {}
    rpc reqJSON(Channel) returns (JSONFeed) {}
}
